name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: mini_credit_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports: ["3307:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h localhost -proot --silent"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with: { bun-version: "1.1.22" }

      - run: bun install --frozen-lockfile
      - name: Wait for MySQL
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h 127.0.0.1 -P 3307 -proot --silent; then
              echo "MySQL is up"; break
            fi
            sleep 2
          done
      - run: bunx prisma generate
      - name: Migrate
        env:
          DATABASE_URL: mysql://user:password@127.0.0.1:3307/mini_credit_db
        run: bunx prisma migrate deploy

      - name: Run tests
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://user:password@127.0.0.1:3307/mini_credit_db
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'testsecret' }}
          PORT: 5000
          PRETTY_LOGS: "false"
          # Optional provider secrets if some tests need them:
          BREVO_EMAIL: ${{ secrets.BREVO_EMAIL || 'admin@minicredit.com' }}
          BREVO_PASSWORD: ${{ secrets.BREVO_PASSWORD || 'password' }}
          BUREAU_API_KEY: ${{ secrets.BUREAU_API_KEY || 'api-key' }}
        run: bun test --coverage

  docker-smoke:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4

      - name: Create .env.ci for compose
        run: |
          cat > .env.ci <<'EOF'
          APP_NAME=Mini Credit Insight
          CLIENT_BASE_URL=http://localhost:3000
          PORT=5000
          NODE_ENV=production
          DATABASE_URL=mysql://user:password@db:3306/mini_credit_db
          JWT_SECRET=${{ secrets.JWT_SECRET || 'ci-secret' }}
          JWT_EXPIRES_IN=10d
          LOG_LEVEL=info
          PRETTY_LOGS=false
          MAIL_FROM=Mini Credit <mini.credit@email.com>
          SUPPORT_EMAIL=Mini Credit <support.credit@email.com>
          MOCK_BUREAU_URL=
          BUREAU_API_KEY=${{ secrets.BUREAU_API_KEY || 'api-key' }}
          BREVO_EMAIL=${{ secrets.BREVO_EMAIL  || 'admin@minicredit.com'}}
          BREVO_PASSWORD=${{ secrets.BREVO_PASSWORD || 'password' }}
          EOF

      - name: Build & start
        run: docker compose --env-file .env.ci up -d --build

      - name: Wait for DB
        run: |
          for i in {1..60}; do
            if docker compose exec -T db mysqladmin ping -h localhost -proot --silent; then
              echo "db ready"; exit 0; fi; sleep 2; done
          docker compose logs db; exit 1

      - name: Migrate in container
        run: docker compose exec -T app bunx prisma migrate deploy

      - name: Health check
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:5000/api/v1/health >/dev/null; then
              echo "healthy"; exit 0; fi; sleep 2; done
          docker compose logs app; exit 1

      - name: Smoke GET /health
        run: curl -fsSL http://localhost:5000/api/v1/health && echo

      - if: failure()
        name: Dump logs
        run: docker compose logs

      - if: always()
        name: Teardown
        run: docker compose down -v
